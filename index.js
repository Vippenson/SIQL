// Generated by purs bundle 0.14.0
var PS = {};
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];          
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindArray"] = bindArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  exports.all = function (p) {
    return function (xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (!p(xs[i])) return false;
      }
      return true;
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  exports["foldl"] = foldl;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };                                                           
  var foldl = Data_Foldable.foldl(Data_Foldable.foldableArray);
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  exports["cons"] = cons;
  exports["head"] = head;
  exports["uncons"] = uncons;
  exports["elemIndex"] = elemIndex;
  exports["concatMap"] = concatMap;
  exports["foldl"] = foldl;
  exports["length"] = $foreign.length;
  exports["filter"] = $foreign.filter;
  exports["all"] = $foreign.all;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["min"] = min;
  exports["ordInt"] = ordInt;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  }; 
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $51 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($51) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["show"] = show;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];                                                                  
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var contains = function (pat) {
      var $20 = indexOf(pat);
      return function ($21) {
          return Data_Maybe.isJust($20($21));
      };
  };
  exports["contains"] = contains;
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["indexOf"] = indexOf;
})(PS);
(function(exports) {
  "use strict";

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];                                                        
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.dotAll) {
              return "s";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })()))));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  exports["regex"] = regex;
  exports["test"] = $foreign.test;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  exports["noFlags"] = noFlags;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["applicativeEffect"] = applicativeEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.typeOf = function (value) {
    return typeof value;
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  exports["unsafeToForeign"] = unsafeToForeign;
  exports["typeOf"] = $foreign.typeOf;
})(PS);
(function(exports) {
  "use strict";

  exports.undefined = undefined
})(PS["Undefined"] = PS["Undefined"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Undefined"] = $PS["Undefined"] || {};
  var exports = $PS["Undefined"];
  var $foreign = $PS["Undefined"];
  exports["undefined"] = $foreign["undefined"];
})(PS);
(function(exports) {
  exports.isInt = function (x) {
    return typeof(x) == "number" && ((x|0) === x);
  };

  exports.getProperty = function (name) {
    return function (x) {
      return x[name];
    };
  };
})(PS["Untagged.TypeCheck"] = PS["Untagged.TypeCheck"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Untagged.TypeCheck"] = $PS["Untagged.TypeCheck"] || {};
  var exports = $PS["Untagged.TypeCheck"];
  var $foreign = $PS["Untagged.TypeCheck"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign = $PS["Foreign"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var HasRuntimeTypeRecordRL = function (hasRuntimeTypeRecRL) {
      this.hasRuntimeTypeRecRL = hasRuntimeTypeRecRL;
  };
  var HasRuntimeType = function (hasRuntimeType) {
      this.hasRuntimeType = hasRuntimeType;
  };
  var hasRuntimeTypeRecordRLNil = new HasRuntimeTypeRecordRL(function (v) {
      return function (v1) {
          return true;
      };
  });
  var hasRuntimeTypeRecRL = function (dict) {
      return dict.hasRuntimeTypeRecRL;
  }; 
  var hasRuntimeTypeInt = new HasRuntimeType(function (v) {
      return $foreign.isInt;
  });
  var hasRuntimeType = function (dict) {
      return dict.hasRuntimeType;
  };
  var hasRuntimeTypeRecordRLCons = function (dictHasRuntimeTypeRecordRL) {
      return function (dictHasRuntimeType) {
          return function (dictIsSymbol) {
              return new HasRuntimeTypeRecordRL(function (v) {
                  return function (x) {
                      var propertyName = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var property = $foreign.getProperty(propertyName)(x);
                      var hasRuntimeTypeA = hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
                      return hasRuntimeTypeA(property) && hasRuntimeTypeRecRL(dictHasRuntimeTypeRecordRL)(Type_Proxy["Proxy"].value)(x);
                  };
              });
          };
      };
  };
  var hasJsType = function (name) {
      return function (x) {
          return Foreign.typeOf(x) === name;
      };
  };
  var hasRuntimeTypeBoolean = new HasRuntimeType(function (v) {
      return hasJsType("boolean");
  });
  var hasRuntimeTypeRecord = function (dictRowToList) {
      return function (dictHasRuntimeTypeRecordRL) {
          return new HasRuntimeType(function (v) {
              return function (x) {
                  return hasJsType("object")(x) && hasRuntimeTypeRecRL(dictHasRuntimeTypeRecordRL)(Type_Proxy["Proxy"].value)(Foreign.unsafeToForeign(x));
              };
          });
      };
  };
  exports["hasRuntimeType"] = hasRuntimeType;
  exports["hasRuntimeTypeBoolean"] = hasRuntimeTypeBoolean;
  exports["hasRuntimeTypeInt"] = hasRuntimeTypeInt;
  exports["hasRuntimeTypeRecord"] = hasRuntimeTypeRecord;
  exports["hasRuntimeTypeRecordRLNil"] = hasRuntimeTypeRecordRLNil;
  exports["hasRuntimeTypeRecordRLCons"] = hasRuntimeTypeRecordRLCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Untagged.Castable"] = $PS["Untagged.Castable"] || {};
  var exports = $PS["Untagged.Castable"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var cast = function (dictCastable) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["cast"] = cast;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Untagged.Union"] = $PS["Untagged.Union"] || {};
  var exports = $PS["Untagged.Union"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign = $PS["Foreign"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Untagged_Castable = $PS["Untagged.Castable"];
  var Untagged_TypeCheck = $PS["Untagged.TypeCheck"];
  var fromOneOf = function (dictInOneOf) {
      return function (dictHasRuntimeType) {
          return function (f) {
              var $45 = Untagged_TypeCheck.hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value)(Foreign.unsafeToForeign(f));
              if ($45) {
                  return Data_Maybe.Just.create(f);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var asOneOf = function (dictCastable) {
      return Untagged_Castable.cast();
  };
  exports["asOneOf"] = asOneOf;
  exports["fromOneOf"] = fromOneOf;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Undefined = $PS["Undefined"];
  var Untagged_TypeCheck = $PS["Untagged.TypeCheck"];
  var Untagged_Union = $PS["Untagged.Union"];                
  var Direct = (function () {
      function Direct(value0) {
          this.value0 = value0;
      };
      Direct.create = function (value0) {
          return new Direct(value0);
      };
      return Direct;
  })();
  var Exclude = (function () {
      function Exclude(value0) {
          this.value0 = value0;
      };
      Exclude.create = function (value0) {
          return new Exclude(value0);
      };
      return Exclude;
  })();
  var Sequence = (function () {
      function Sequence(value0) {
          this.value0 = value0;
      };
      Sequence.create = function (value0) {
          return new Sequence(value0);
      };
      return Sequence;
  })();
  var Variable = (function () {
      function Variable(value0) {
          this.value0 = value0;
      };
      Variable.create = function (value0) {
          return new Variable(value0);
      };
      return Variable;
  })();
  var Having = (function () {
      function Having(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Having.create = function (value0) {
          return function (value1) {
              return new Having(value0, value1);
          };
      };
      return Having;
  })();
  var mkOptimisedDefinition = function (name) {
      return function (queries) {
          return {
              name: name,
              querys: queries
          };
      };
  };
  var mkNAll = Untagged_Union.asOneOf()({
      nall: true
  });
  var mkExact = function (i) {
      return Untagged_Union.asOneOf()({
          exact: i
      });
  };
  var mkAll = Untagged_Union.asOneOf()({
      all: true
  });
  var matchQuantity = function (q) {
      return function (vAll) {
          return function (vNAll) {
              return function (fExact) {
                  var v = Untagged_Union.fromOneOf()(Untagged_TypeCheck.hasRuntimeTypeRecord()(Untagged_TypeCheck.hasRuntimeTypeRecordRLCons(Untagged_TypeCheck.hasRuntimeTypeRecordRLNil)(Untagged_TypeCheck.hasRuntimeTypeBoolean)(new Data_Symbol.IsSymbol(function () {
                      return "all";
                  }))))(q);
                  if (v instanceof Data_Maybe.Just) {
                      return vAll;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var v1 = Untagged_Union.fromOneOf()(Untagged_TypeCheck.hasRuntimeTypeRecord()(Untagged_TypeCheck.hasRuntimeTypeRecordRLCons(Untagged_TypeCheck.hasRuntimeTypeRecordRLNil)(Untagged_TypeCheck.hasRuntimeTypeBoolean)(new Data_Symbol.IsSymbol(function () {
                          return "nall";
                      }))))(q);
                      if (v1 instanceof Data_Maybe.Just) {
                          return vNAll;
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          var v2 = Untagged_Union.fromOneOf()(Untagged_TypeCheck.hasRuntimeTypeRecord()(Untagged_TypeCheck.hasRuntimeTypeRecordRLCons(Untagged_TypeCheck.hasRuntimeTypeRecordRLNil)(Untagged_TypeCheck.hasRuntimeTypeInt)(new Data_Symbol.IsSymbol(function () {
                              return "exact";
                          }))))(q);
                          if (v2 instanceof Data_Maybe.Just) {
                              return fExact(v2.value0.exact);
                          };
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Undefined["undefined"];
                          };
                          throw new Error("Failed pattern match at Main (line 37, column 18 - line 39, column 36): " + [ v2.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Main (line 35, column 16 - line 39, column 36): " + [ v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Main (line 33, column 3 - line 39, column 36): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var take = function (q) {
      return function (v) {
          return matchQuantity(q)({
              leftCount: 0,
              viewCount: v.leftCount + v.viewCount | 0
          })({
              leftCount: 0,
              viewCount: v.viewCount
          })(function (exact) {
              var $56 = exact >= 0;
              if ($56) {
                  var t = Data_Ord.min(Data_Ord.ordInt)(exact)(v.leftCount);
                  return {
                      leftCount: v.leftCount - t | 0,
                      viewCount: t + v.viewCount | 0
                  };
              };
              var t = Data_Ord.min(Data_Ord.ordInt)(-exact | 0)(v.leftCount);
              return {
                  leftCount: v.leftCount - t | 0,
                  viewCount: v.viewCount
              };
          });
      };
  };
  var match = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 === "Equal") {
                  return v === v2;
              };
              if (v1 === "is") {
                  return v === v2;
              };
              if (v1 === "==") {
                  return v === v2;
              };
              if (v1 === "contains") {
                  return Data_String_CodeUnits.contains(v2)(v);
              };
              if (v1 === "startsWith") {
                  var v4 = Data_String_CodePoints.indexOf(v2)(v);
                  if (v4 instanceof Data_Maybe.Nothing) {
                      return false;
                  };
                  if (v4 instanceof Data_Maybe.Just) {
                      return v4.value0 === 0;
                  };
                  throw new Error("Failed pattern match at Main (line 453, column 29 - line 455, column 49): " + [ v4.constructor.name ]);
              };
              if (v1 === "of") {
                  var v4 = Data_String_Regex.regex(v2)(Data_String_Regex_Flags.noFlags);
                  if (v4 instanceof Data_Either.Left) {
                      return false;
                  };
                  if (v4 instanceof Data_Either.Right) {
                      return Data_String_Regex.test(v4.value0)(v);
                  };
                  throw new Error("Failed pattern match at Main (line 456, column 29 - line 458, column 50): " + [ v4.constructor.name ]);
              };
              if (v1 === ">") {
                  return v > v2;
              };
              if (v1 === "<") {
                  return v < v2;
              };
              if (v1 === ">=") {
                  return v >= v2;
              };
              if (v1 === "<=") {
                  return v <= v2;
              };
              if (v1 === "!==") {
                  return !(v === v2);
              };
              if (v1 === "contains") {
                  return !Data_String_CodeUnits.contains(v2)(v);
              };
              if (v1 === "startsWith") {
                  return !(function () {
                      var v4 = Data_String_CodePoints.indexOf(v2)(v);
                      if (v4 instanceof Data_Maybe.Nothing) {
                          return false;
                      };
                      if (v4 instanceof Data_Maybe.Just) {
                          return v4.value0 === 0;
                      };
                      throw new Error("Failed pattern match at Main (line 465, column 34 - line 467, column 54): " + [ v4.constructor.name ]);
                  })();
              };
              if (v1 === "of") {
                  return !(function () {
                      var v4 = Data_String_Regex.regex(v2)(Data_String_Regex_Flags.noFlags);
                      if (v4 instanceof Data_Either.Left) {
                          return false;
                      };
                      if (v4 instanceof Data_Either.Right) {
                          return Data_String_Regex.test(v4.value0)(v);
                      };
                      throw new Error("Failed pattern match at Main (line 468, column 34 - line 470, column 55): " + [ v4.constructor.name ]);
                  })();
              };
              if (v1 === "!>") {
                  return !(v > v2);
              };
              if (v1 === "!<") {
                  return !(v < v2);
              };
              if (v1 === "!>=") {
                  return !(v >= v2);
              };
              if (v1 === "!<=") {
                  return !(v <= v2);
              };
              return false;
          };
      };
  };
  var matchPredicate = function (v) {
      return function (item) {
          return Data_Array.length(Data_Array.filter(function (v1) {
              return !(v1.field === v.field) || match(v1.value)(v.mode)(v.value);
          })(item.fieldValues)) === Data_Array.length(item.fieldValues);
      };
  };
  var matchPredicates = function (ps) {
      return function (item) {
          return Data_Array.length(Data_Array.filter(function (p) {
              return matchPredicate(p)(item);
          })(ps)) === Data_Array.length(ps);
      };
  };
  var main = Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
  var lookUpDefinition = function ($copy_c) {
      return function ($copy_queryName) {
          var $tco_var_c = $copy_c;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(c, queryName) {
              var v = Data_Array.uncons(c);
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Direct({
                      predicates: [  ],
                      quantity: mkExact(0)
                  });
              };
              if (v instanceof Data_Maybe.Just) {
                  var $81 = v.value0.head.name === queryName;
                  if ($81) {
                      $tco_done = true;
                      return v.value0.head.query;
                  };
                  $tco_var_c = v.value0.tail;
                  $copy_queryName = queryName;
                  return;
              };
              throw new Error("Failed pattern match at Main (line 122, column 3 - line 127, column 63): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_c, $copy_queryName);
          };
          return $tco_result;
      };
  };
  var group = function (fs) {
      var v = Data_Array.uncons(fs);
      if (v instanceof Data_Maybe.Nothing) {
          return [  ];
      };
      if (v instanceof Data_Maybe.Just) {
          var tail$prime$prime = Data_Array.filter(function (fmv) {
              return fmv.field !== v.value0.head.field;
          })(v.value0.tail);
          var tail$prime = Data_Array.filter(function (fmv) {
              return fmv.field === v.value0.head.field;
          })(v.value0.tail);
          return Data_Array.cons({
              field: v.value0.head.field,
              modeValues: Data_Array.cons({
                  mode: v.value0.head.mode,
                  value: v.value0.head.value
              })(Data_Functor.map(Data_Functor.functorArray)(function (fmv) {
                  return {
                      mode: fmv.mode,
                      value: fmv.value
                  };
              })(tail$prime))
          })(group(tail$prime$prime));
      };
      throw new Error("Failed pattern match at Main (line 237, column 3 - line 245, column 28): " + [ v.constructor.name ]);
  };
  var getValue = function (item) {
      return function (field) {
          var fvs = Data_Array.filter(function (v) {
              return v.field === field;
          })(item.fieldValues);
          var v = Data_Array.uncons(fvs);
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Maybe.Just && v.value0.tail.length === 0) {
              return new Data_Maybe.Just(v.value0.head.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Main (line 515, column 3 - line 518, column 57): " + [ v.constructor.name ]);
      };
  };
  var matchPredicateOpt = function (v) {
      return function (item) {
          var v1 = getValue(item)(v.field);
          if (v1 instanceof Data_Maybe.Nothing) {
              return true;
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Data_Array.all(function (v3) {
                  return match(v1.value0)(v3.mode)(v3.value);
              })(v.modeValues);
          };
          throw new Error("Failed pattern match at Main (line 442, column 5 - line 444, column 73): " + [ v1.constructor.name ]);
      };
  };
  var matchPredicatesOpt = function (ps) {
      return function (item) {
          return Data_Array.all(function (p) {
              return matchPredicateOpt(p)(item);
          })(ps);
      };
  };
  var flatten = function (c) {
      return function (v) {
          if (v instanceof Direct) {
              return [ v.value0 ];
          };
          if (v instanceof Sequence) {
              return Data_Array.concatMap(flatten(c))(v.value0);
          };
          if (v instanceof Variable) {
              return flatten(c)(lookUpDefinition(c)(v.value0));
          };
          if (v instanceof Having) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return {
                      predicates: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.predicates),
                      quantity: v1.quantity
                  };
              })(flatten(c)(v.value1));
          };
          if (v instanceof Exclude) {
              if (v.value0 instanceof Direct) {
                  return matchQuantity(v.value0.value0.quantity)([ {
                      predicates: v.value0.value0.predicates,
                      quantity: mkNAll
                  } ])([ {
                      predicates: v.value0.value0.predicates,
                      quantity: mkNAll
                  } ])(function (q) {
                      var $119 = q <= 0;
                      if ($119) {
                          return [ {
                              predicates: v.value0.value0.predicates,
                              quantity: mkExact(q)
                          } ];
                      };
                      return [ {
                          predicates: v.value0.value0.predicates,
                          quantity: mkExact(-q | 0)
                      } ];
                  });
              };
              if (v.value0 instanceof Exclude) {
                  return flatten(c)(v.value0);
              };
              if (v.value0 instanceof Sequence) {
                  return flatten(c)(new Sequence(Data_Functor.map(Data_Functor.functorArray)(Exclude.create)(v.value0.value0)));
              };
              if (v.value0 instanceof Variable) {
                  return flatten(c)(new Exclude(lookUpDefinition(c)(v.value0.value0)));
              };
              if (v.value0 instanceof Having) {
                  return flatten(c)(new Having(v.value0.value0, new Exclude(v.value0.value1)));
              };
              throw new Error("Failed pattern match at Main (line 196, column 3 - line 211, column 53): " + [ v.value0.constructor.name ]);
          };
          throw new Error("Failed pattern match at Main (line 187, column 1 - line 187, column 43): " + [ c.constructor.name, v.constructor.name ]);
      };
  };
  var flattenAll = function (c) {
      return Data_Functor.map(Data_Functor.functorArray)(function (d) {
          return {
              name: d.name,
              querys: flatten(c)(d.query)
          };
      })(c);
  };
  var flattenedCheckedConfig = function (r) {
      var $129 = r.nameError === "";
      if ($129) {
          return {
              nameError: "",
              nameCheckedTree: flattenAll(r.nameCheckedTree)
          };
      };
      return {
          nameError: r.nameError,
          nameCheckedTree: [  ]
      };
  };
  var evalItemOpt = function (fs) {
      return function (item) {
          return Data_Array.foldl(function (item$prime) {
              return function (f) {
                  var $130 = matchPredicatesOpt(f.predicates)(item$prime);
                  if ($130) {
                      var r = take(f.quantity)({
                          leftCount: item$prime.leftCount,
                          viewCount: item$prime.viewCount
                      });
                      return {
                          leftCount: r.leftCount,
                          viewCount: r.viewCount,
                          fieldValues: item$prime.fieldValues
                      };
                  };
                  return item$prime;
              };
          })(item)(fs);
      };
  };
  var evalItem = function (fs) {
      return function (item) {
          return Data_Array.foldl(function (item$prime) {
              return function (f) {
                  var $131 = matchPredicates(f.predicates)(item$prime);
                  if ($131) {
                      var r = take(f.quantity)({
                          leftCount: item$prime.leftCount,
                          viewCount: item$prime.viewCount
                      });
                      return {
                          leftCount: r.leftCount,
                          viewCount: r.viewCount,
                          fieldValues: item$prime.fieldValues
                      };
                  };
                  return item$prime;
              };
          })(item)(fs);
      };
  };
  var convertToItemList = function (inputItems) {
      var v = Data_Array.uncons(inputItems);
      if (v instanceof Data_Maybe.Nothing) {
          return [  ];
      };
      if (v instanceof Data_Maybe.Just) {
          return Data_Array.cons({
              leftCount: v.value0.head.quantity,
              viewCount: 0,
              fieldValues: [ {
                  field: "text",
                  value: v.value0.head.text
              }, {
                  field: "kind",
                  value: v.value0.head.kind
              } ]
          })(convertToItemList(v.value0.tail));
      };
      throw new Error("Failed pattern match at Main (line 548, column 5 - line 555, column 33): " + [ v.constructor.name ]);
  };
  var convertFromItemList = function (items) {
      var v = Data_Array.uncons(items);
      if (v instanceof Data_Maybe.Nothing) {
          return [  ];
      };
      if (v instanceof Data_Maybe.Just) {
          var $137 = v.value0.head.viewCount <= 0;
          if ($137) {
              return convertFromItemList(v.value0.tail);
          };
          var v1 = getValue(v.value0.head)("text");
          if (v1 instanceof Data_Maybe.Nothing) {
              return convertFromItemList(v.value0.tail);
          };
          if (v1 instanceof Data_Maybe.Just) {
              var v2 = getValue(v.value0.head)("kind");
              if (v2 instanceof Data_Maybe.Nothing) {
                  return convertFromItemList(v.value0.tail);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  return Data_Array.cons({
                      text: v1.value0,
                      kind: v2.value0,
                      quantity: v.value0.head.viewCount
                  })(convertFromItemList(v.value0.tail));
              };
              throw new Error("Failed pattern match at Main (line 537, column 26 - line 542, column 57): " + [ v2.constructor.name ]);
          };
          throw new Error("Failed pattern match at Main (line 535, column 11 - line 542, column 57): " + [ v1.constructor.name ]);
      };
      throw new Error("Failed pattern match at Main (line 528, column 5 - line 542, column 57): " + [ v.constructor.name ]);
  };
  var checkConsistency = function (v) {
      return function (mvs) {
          var v1 = Data_Array.uncons(mvs);
          if (v1 instanceof Data_Maybe.Nothing) {
              return true;
          };
          if (v1 instanceof Data_Maybe.Just) {
              return match(v)(v1.value0.head.mode)(v1.value0.head.value) && checkConsistency(v)(v1.value0.tail);
          };
          throw new Error("Failed pattern match at Main (line 302, column 3 - line 305, column 34): " + [ v1.constructor.name ]);
      };
  };
  var _optimiseEql = function ($copy_v) {
      return function ($copy_prevModeValues) {
          return function ($copy_nextModeValues) {
              var $tco_var_v = $copy_v;
              var $tco_var_prevModeValues = $copy_prevModeValues;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, prevModeValues, nextModeValues) {
                  var $154 = v.mode === "==";
                  if ($154) {
                      var $155 = checkConsistency(v.value)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(prevModeValues)(nextModeValues));
                      if ($155) {
                          $tco_done = true;
                          return new Data_Maybe.Just([ {
                              mode: "==",
                              value: v.value
                          } ]);
                      };
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  var v1 = Data_Array.uncons(nextModeValues);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return new Data_Maybe.Just(Data_Semigroup.append(Data_Semigroup.semigroupArray)(prevModeValues)([ {
                          mode: v.mode,
                          value: v.value
                      } ]));
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      $tco_var_v = v1.value0.head;
                      $tco_var_prevModeValues = Data_Semigroup.append(Data_Semigroup.semigroupArray)(prevModeValues)([ v ]);
                      $copy_nextModeValues = v1.value0.tail;
                      return;
                  };
                  throw new Error("Failed pattern match at Main (line 292, column 8 - line 298, column 36): " + [ v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $tco_var_prevModeValues, $copy_nextModeValues);
              };
              return $tco_result;
          };
      };
  };
  var optimiseEql = function (modeValues) {
      var v = Data_Array.uncons(modeValues);
      if (v instanceof Data_Maybe.Nothing) {
          return new Data_Maybe.Just([  ]);
      };
      if (v instanceof Data_Maybe.Just) {
          return _optimiseEql(v.value0.head)([  ])(v.value0.tail);
      };
      throw new Error("Failed pattern match at Main (line 278, column 3 - line 282, column 32): " + [ v.constructor.name ]);
  };
  var optimisationRules = function (mvs) {
      var v = Data_Array.uncons(mvs);
      if (v instanceof Data_Maybe.Nothing) {
          return new Data_Maybe.Just([  ]);
      };
      if (v instanceof Data_Maybe.Just) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(optimiseEql(v.value0.head.modeValues))(function (modeValues$prime) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(optimisationRules(v.value0.tail))(function (tail$prime) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((function () {
                      var $167 = Data_Array.length(modeValues$prime) === 0;
                      if ($167) {
                          return tail$prime;
                      };
                      return Data_Array.cons({
                          field: v.value0.head.field,
                          modeValues: modeValues$prime
                      })(tail$prime);
                  })());
              });
          });
      };
      throw new Error("Failed pattern match at Main (line 266, column 2 - line 273, column 70): " + [ v.constructor.name ]);
  };
  var _optimise = function (gfs) {
      var v = Data_Array.uncons(gfs);
      if (v instanceof Data_Maybe.Nothing) {
          return [  ];
      };
      if (v instanceof Data_Maybe.Just) {
          var v1 = optimisationRules(v.value0.head.predicates);
          if (v1 instanceof Data_Maybe.Nothing) {
              return _optimise(v.value0.tail);
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Data_Array.cons({
                  predicates: v1.value0,
                  quantity: v.value0.head.quantity
              })(_optimise(v.value0.tail));
          };
          throw new Error("Failed pattern match at Main (line 259, column 7 - line 262, column 47): " + [ v1.constructor.name ]);
      };
      throw new Error("Failed pattern match at Main (line 256, column 3 - line 262, column 47): " + [ v.constructor.name ]);
  };
  var optimise = function (fs) {
      return _optimise(Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return {
              predicates: group(v.predicates),
              quantity: v.quantity
          };
      })(fs));
  };
  var optimiseAll = function (c) {
      return Data_Functor.map(Data_Functor.functorArray)(function (d) {
          return mkOptimisedDefinition(d.name)(optimise(d.querys));
      })(c);
  };
  var optimisedCheckedConfig = function (r) {
      var $184 = r.nameError === "";
      if ($184) {
          return {
              nameError: "",
              optimisedConfig: optimiseAll(r.nameCheckedTree)
          };
      };
      return {
          nameError: r.nameError,
          optimisedConfig: [  ]
      };
  };
  var _nameCheckQuery = function (knowns) {
      return function (v) {
          if (v instanceof Direct) {
              return [  ];
          };
          if (v instanceof Sequence) {
              return Data_Array.foldl(function (r) {
                  return function (s) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(r)(_nameCheckQuery(knowns)(s));
                  };
              })([  ])(v.value0);
          };
          if (v instanceof Exclude) {
              return _nameCheckQuery(knowns)(v.value0);
          };
          if (v instanceof Variable) {
              var v2 = Data_Array.elemIndex(Data_Eq.eqString)(v.value0)(knowns);
              if (v2 instanceof Data_Maybe.Nothing) {
                  return [ v.value0 ];
              };
              if (v2 instanceof Data_Maybe.Just) {
                  return [  ];
              };
              throw new Error("Failed pattern match at Main (line 180, column 4 - line 182, column 19): " + [ v2.constructor.name ]);
          };
          if (v instanceof Having) {
              return _nameCheckQuery(knowns)(v.value1);
          };
          throw new Error("Failed pattern match at Main (line 173, column 1 - line 173, column 53): " + [ knowns.constructor.name, v.constructor.name ]);
      };
  };
  var _nameCheckConfig = function ($copy_names) {
      return function ($copy_c) {
          var $tco_var_names = $copy_names;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(names, c) {
              var v = Data_Array.uncons(c);
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  var chkHead = _nameCheckQuery(names)(v.value0.head.query);
                  var $196 = Data_Array.length(chkHead) > 0;
                  if ($196) {
                      $tco_done = true;
                      return new Data_Maybe.Just({
                          at: v.value0.head.name,
                          unknownNames: chkHead
                      });
                  };
                  $tco_var_names = Data_Array.cons(v.value0.head.name)(names);
                  $copy_c = v.value0.tail;
                  return;
              };
              throw new Error("Failed pattern match at Main (line 165, column 3 - line 171, column 53): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_names, $copy_c);
          };
          return $tco_result;
      };
  };
  var nameCheckConfig = _nameCheckConfig([  ]);
  var _evaluateOpt = function (cs) {
      return function (n) {
          return function (items) {
              var cs$prime = Data_Array.filter(function (x) {
                  return x.name === n;
              })(cs);
              var fs = (function () {
                  var v = Data_Array.head(cs$prime);
                  if (v instanceof Data_Maybe.Nothing) {
                      return [  ];
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0.querys;
                  };
                  throw new Error("Failed pattern match at Main (line 385, column 13 - line 387, column 35): " + [ v.constructor.name ]);
              })();
              return Data_Functor.map(Data_Functor.functorArray)(evalItemOpt(fs))(items);
          };
      };
  };
  var evaluateOptimisedConfig = function (v) {
      return function (n) {
          return function (inputItems) {
              if (v.nameError === "") {
                  var items = convertToItemList(inputItems);
                  var items$prime = _evaluateOpt(v.optimisedConfig)(n)(items);
                  return convertFromItemList(items$prime);
              };
              return [  ];
          };
      };
  };
  var _evaluate = function (cs) {
      return function (n) {
          return function (items) {
              var cs$prime = Data_Array.filter(function (x) {
                  return x.name === n;
              })(cs);
              var fs = (function () {
                  var v = Data_Array.head(cs$prime);
                  if (v instanceof Data_Maybe.Nothing) {
                      return [  ];
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0.querys;
                  };
                  throw new Error("Failed pattern match at Main (line 375, column 13 - line 377, column 35): " + [ v.constructor.name ]);
              })();
              return Data_Functor.map(Data_Functor.functorArray)(evalItem(fs))(items);
          };
      };
  };
  var evaluate = function (c) {
      return function (n) {
          return function (items) {
              return _evaluate(flattenAll(c))(n)(items);
          };
      };
  };
  var evaluateCheckedConfig = function (v) {
      return function (n) {
          return function (inputItems) {
              if (v.nameError === "") {
                  var items = convertToItemList(inputItems);
                  var items$prime = _evaluate(v.nameCheckedTree)(n)(items);
                  return convertFromItemList(items$prime);
              };
              return [  ];
          };
      };
  };
  var _checkDuplicates = function ($copy_names) {
      return function ($copy_c) {
          var $tco_var_names = $copy_names;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(names, c) {
              var v = Data_Array.uncons(c);
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  var v1 = Data_Array.elemIndex(Data_Eq.eqString)(v.value0.head.name)(names);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      $tco_var_names = Data_Array.cons(v.value0.head.name)(names);
                      $copy_c = v.value0.tail;
                      return;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0.head.name);
                  };
                  throw new Error("Failed pattern match at Main (line 153, column 8 - line 155, column 35): " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Main (line 150, column 4 - line 155, column 35): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_names, $copy_c);
          };
          return $tco_result;
      };
  };
  var checkDuplicates = _checkDuplicates([  ]);
  var nameCheck = function (c) {
      var v = checkDuplicates(c);
      if (v instanceof Data_Maybe.Just) {
          return {
              nameError: v.value0 + " is already defined!",
              nameCheckedTree: [  ]
          };
      };
      if (v instanceof Data_Maybe.Nothing) {
          var v1 = nameCheckConfig(c);
          if (v1 instanceof Data_Maybe.Nothing) {
              return {
                  nameError: "",
                  nameCheckedTree: c
              };
          };
          if (v1 instanceof Data_Maybe.Just) {
              return {
                  nameError: v1.value0.at + (" has undefined names " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(v1.value0.unknownNames)),
                  nameCheckedTree: [  ]
              };
          };
          throw new Error("Failed pattern match at Main (line 136, column 16 - line 141, column 32): " + [ v1.constructor.name ]);
      };
      throw new Error("Failed pattern match at Main (line 133, column 3 - line 141, column 32): " + [ v.constructor.name ]);
  };
  exports["mkAll"] = mkAll;
  exports["mkNAll"] = mkNAll;
  exports["mkExact"] = mkExact;
  exports["matchQuantity"] = matchQuantity;
  exports["Direct"] = Direct;
  exports["Exclude"] = Exclude;
  exports["Sequence"] = Sequence;
  exports["Variable"] = Variable;
  exports["Having"] = Having;
  exports["lookUpDefinition"] = lookUpDefinition;
  exports["nameCheck"] = nameCheck;
  exports["checkDuplicates"] = checkDuplicates;
  exports["_checkDuplicates"] = _checkDuplicates;
  exports["nameCheckConfig"] = nameCheckConfig;
  exports["_nameCheckConfig"] = _nameCheckConfig;
  exports["_nameCheckQuery"] = _nameCheckQuery;
  exports["flatten"] = flatten;
  exports["flattenAll"] = flattenAll;
  exports["mkOptimisedDefinition"] = mkOptimisedDefinition;
  exports["optimiseAll"] = optimiseAll;
  exports["group"] = group;
  exports["optimise"] = optimise;
  exports["_optimise"] = _optimise;
  exports["optimisationRules"] = optimisationRules;
  exports["optimiseEql"] = optimiseEql;
  exports["_optimiseEql"] = _optimiseEql;
  exports["checkConsistency"] = checkConsistency;
  exports["flattenedCheckedConfig"] = flattenedCheckedConfig;
  exports["optimisedCheckedConfig"] = optimisedCheckedConfig;
  exports["take"] = take;
  exports["_evaluate"] = _evaluate;
  exports["_evaluateOpt"] = _evaluateOpt;
  exports["evalItem"] = evalItem;
  exports["evalItemOpt"] = evalItemOpt;
  exports["matchPredicates"] = matchPredicates;
  exports["matchPredicatesOpt"] = matchPredicatesOpt;
  exports["matchPredicate"] = matchPredicate;
  exports["matchPredicateOpt"] = matchPredicateOpt;
  exports["match"] = match;
  exports["evaluate"] = evaluate;
  exports["evaluateCheckedConfig"] = evaluateCheckedConfig;
  exports["evaluateOptimisedConfig"] = evaluateOptimisedConfig;
  exports["getValue"] = getValue;
  exports["convertFromItemList"] = convertFromItemList;
  exports["convertToItemList"] = convertToItemList;
  exports["main"] = main;
})(PS);
PS["Main"].main();