// Generated by purs bundle 0.14.0
var PS = {};
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];          
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindArray"] = bindArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq; 
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  exports["foldl"] = foldl;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };                                                           
  var foldl = Data_Foldable.foldl(Data_Foldable.foldableArray);
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  exports["cons"] = cons;
  exports["head"] = head;
  exports["uncons"] = uncons;
  exports["elemIndex"] = elemIndex;
  exports["concatMap"] = concatMap;
  exports["foldl"] = foldl;
  exports["length"] = $foreign.length;
  exports["filter"] = $foreign.filter;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["min"] = min;
  exports["ordInt"] = ordInt;
})(PS);
(function(exports) {
  "use strict";

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["show"] = show;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["applicativeEffect"] = applicativeEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.typeOf = function (value) {
    return typeof value;
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  exports["unsafeToForeign"] = unsafeToForeign;
  exports["typeOf"] = $foreign.typeOf;
})(PS);
(function(exports) {
  "use strict";

  exports.undefined = undefined
})(PS["Undefined"] = PS["Undefined"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Undefined"] = $PS["Undefined"] || {};
  var exports = $PS["Undefined"];
  var $foreign = $PS["Undefined"];
  exports["undefined"] = $foreign["undefined"];
})(PS);
(function(exports) {
  exports.isInt = function (x) {
    return typeof(x) == "number" && ((x|0) === x);
  };

  exports.getProperty = function (name) {
    return function (x) {
      return x[name];
    };
  };
})(PS["Untagged.TypeCheck"] = PS["Untagged.TypeCheck"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Untagged.TypeCheck"] = $PS["Untagged.TypeCheck"] || {};
  var exports = $PS["Untagged.TypeCheck"];
  var $foreign = $PS["Untagged.TypeCheck"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign = $PS["Foreign"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var HasRuntimeTypeRecordRL = function (hasRuntimeTypeRecRL) {
      this.hasRuntimeTypeRecRL = hasRuntimeTypeRecRL;
  };
  var HasRuntimeType = function (hasRuntimeType) {
      this.hasRuntimeType = hasRuntimeType;
  };
  var hasRuntimeTypeRecordRLNil = new HasRuntimeTypeRecordRL(function (v) {
      return function (v1) {
          return true;
      };
  });
  var hasRuntimeTypeRecRL = function (dict) {
      return dict.hasRuntimeTypeRecRL;
  }; 
  var hasRuntimeTypeInt = new HasRuntimeType(function (v) {
      return $foreign.isInt;
  });
  var hasRuntimeType = function (dict) {
      return dict.hasRuntimeType;
  };
  var hasRuntimeTypeRecordRLCons = function (dictHasRuntimeTypeRecordRL) {
      return function (dictHasRuntimeType) {
          return function (dictIsSymbol) {
              return new HasRuntimeTypeRecordRL(function (v) {
                  return function (x) {
                      var propertyName = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var property = $foreign.getProperty(propertyName)(x);
                      var hasRuntimeTypeA = hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
                      return hasRuntimeTypeA(property) && hasRuntimeTypeRecRL(dictHasRuntimeTypeRecordRL)(Type_Proxy["Proxy"].value)(x);
                  };
              });
          };
      };
  };
  var hasJsType = function (name) {
      return function (x) {
          return Foreign.typeOf(x) === name;
      };
  };
  var hasRuntimeTypeBoolean = new HasRuntimeType(function (v) {
      return hasJsType("boolean");
  });
  var hasRuntimeTypeRecord = function (dictRowToList) {
      return function (dictHasRuntimeTypeRecordRL) {
          return new HasRuntimeType(function (v) {
              return function (x) {
                  return hasJsType("object")(x) && hasRuntimeTypeRecRL(dictHasRuntimeTypeRecordRL)(Type_Proxy["Proxy"].value)(Foreign.unsafeToForeign(x));
              };
          });
      };
  };
  exports["hasRuntimeType"] = hasRuntimeType;
  exports["hasRuntimeTypeBoolean"] = hasRuntimeTypeBoolean;
  exports["hasRuntimeTypeInt"] = hasRuntimeTypeInt;
  exports["hasRuntimeTypeRecord"] = hasRuntimeTypeRecord;
  exports["hasRuntimeTypeRecordRLNil"] = hasRuntimeTypeRecordRLNil;
  exports["hasRuntimeTypeRecordRLCons"] = hasRuntimeTypeRecordRLCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Untagged.Castable"] = $PS["Untagged.Castable"] || {};
  var exports = $PS["Untagged.Castable"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var cast = function (dictCastable) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["cast"] = cast;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Untagged.Union"] = $PS["Untagged.Union"] || {};
  var exports = $PS["Untagged.Union"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign = $PS["Foreign"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Untagged_Castable = $PS["Untagged.Castable"];
  var Untagged_TypeCheck = $PS["Untagged.TypeCheck"];
  var fromOneOf = function (dictInOneOf) {
      return function (dictHasRuntimeType) {
          return function (f) {
              var $45 = Untagged_TypeCheck.hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value)(Foreign.unsafeToForeign(f));
              if ($45) {
                  return Data_Maybe.Just.create(f);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var asOneOf = function (dictCastable) {
      return Untagged_Castable.cast();
  };
  exports["asOneOf"] = asOneOf;
  exports["fromOneOf"] = fromOneOf;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Undefined = $PS["Undefined"];
  var Untagged_TypeCheck = $PS["Untagged.TypeCheck"];
  var Untagged_Union = $PS["Untagged.Union"];                
  var Direct = (function () {
      function Direct(value0) {
          this.value0 = value0;
      };
      Direct.create = function (value0) {
          return new Direct(value0);
      };
      return Direct;
  })();
  var Exclude = (function () {
      function Exclude(value0) {
          this.value0 = value0;
      };
      Exclude.create = function (value0) {
          return new Exclude(value0);
      };
      return Exclude;
  })();
  var Sequence = (function () {
      function Sequence(value0) {
          this.value0 = value0;
      };
      Sequence.create = function (value0) {
          return new Sequence(value0);
      };
      return Sequence;
  })();
  var Variable = (function () {
      function Variable(value0) {
          this.value0 = value0;
      };
      Variable.create = function (value0) {
          return new Variable(value0);
      };
      return Variable;
  })();
  var mkNAll = Untagged_Union.asOneOf()({
      nall: true
  });
  var mkExact = function (i) {
      return Untagged_Union.asOneOf()({
          exact: i
      });
  };
  var mkAll = Untagged_Union.asOneOf()({
      all: true
  });
  var matchQuantity = function (q) {
      return function (vAll) {
          return function (vNAll) {
              return function (fExact) {
                  var v = Untagged_Union.fromOneOf()(Untagged_TypeCheck.hasRuntimeTypeRecord()(Untagged_TypeCheck.hasRuntimeTypeRecordRLCons(Untagged_TypeCheck.hasRuntimeTypeRecordRLNil)(Untagged_TypeCheck.hasRuntimeTypeBoolean)(new Data_Symbol.IsSymbol(function () {
                      return "all";
                  }))))(q);
                  if (v instanceof Data_Maybe.Just) {
                      return vAll;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var v1 = Untagged_Union.fromOneOf()(Untagged_TypeCheck.hasRuntimeTypeRecord()(Untagged_TypeCheck.hasRuntimeTypeRecordRLCons(Untagged_TypeCheck.hasRuntimeTypeRecordRLNil)(Untagged_TypeCheck.hasRuntimeTypeBoolean)(new Data_Symbol.IsSymbol(function () {
                          return "nall";
                      }))))(q);
                      if (v1 instanceof Data_Maybe.Just) {
                          return vNAll;
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          var v2 = Untagged_Union.fromOneOf()(Untagged_TypeCheck.hasRuntimeTypeRecord()(Untagged_TypeCheck.hasRuntimeTypeRecordRLCons(Untagged_TypeCheck.hasRuntimeTypeRecordRLNil)(Untagged_TypeCheck.hasRuntimeTypeInt)(new Data_Symbol.IsSymbol(function () {
                              return "exact";
                          }))))(q);
                          if (v2 instanceof Data_Maybe.Just) {
                              return fExact(v2.value0.exact);
                          };
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Undefined["undefined"];
                          };
                          throw new Error("Failed pattern match at Main (line 34, column 18 - line 36, column 36): " + [ v2.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Main (line 32, column 16 - line 36, column 36): " + [ v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Main (line 30, column 3 - line 36, column 36): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var take = function (q) {
      return function (v) {
          return matchQuantity(q)({
              leftCount: 0,
              viewCount: v.leftCount + v.viewCount | 0
          })({
              leftCount: 0,
              viewCount: v.viewCount
          })(function (exact) {
              var $36 = exact >= 0;
              if ($36) {
                  var t = Data_Ord.min(Data_Ord.ordInt)(exact)(v.leftCount);
                  return {
                      leftCount: v.leftCount - t | 0,
                      viewCount: t + v.viewCount | 0
                  };
              };
              var t = Data_Ord.min(Data_Ord.ordInt)(-exact | 0)(v.leftCount);
              return {
                  leftCount: v.leftCount - t | 0,
                  viewCount: v.viewCount
              };
          });
      };
  };
  var match = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 === "Equal") {
                  return v === v2;
              };
              if (v1 === "==") {
                  return v === v2;
              };
              if (v1 === "is") {
                  return v === v2;
              };
              return false;
          };
      };
  };
  var matchPredicate = function (v) {
      return function (item) {
          return Data_Array.length(Data_Array.filter(function (v1) {
              return !(v1.field === v.field) || match(v1.value)(v.mode)(v.value);
          })(item.fieldValues)) === Data_Array.length(item.fieldValues);
      };
  };
  var matchPredicates = function (ps) {
      return function (item) {
          return Data_Array.length(Data_Array.filter(function (p) {
              return matchPredicate(p)(item);
          })(ps)) === Data_Array.length(ps);
      };
  };
  var main = Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
  var lookUpDefinition = function ($copy_c) {
      return function ($copy_selectorName) {
          var $tco_var_c = $copy_c;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(c, selectorName) {
              var v = Data_Array.uncons(c);
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Direct({
                      predicates: [  ],
                      quantity: mkExact(0)
                  });
              };
              if (v instanceof Data_Maybe.Just) {
                  var $51 = v.value0.head.name === selectorName;
                  if ($51) {
                      $tco_done = true;
                      return v.value0.head.selector;
                  };
                  $tco_var_c = v.value0.tail;
                  $copy_selectorName = selectorName;
                  return;
              };
              throw new Error("Failed pattern match at Main (line 94, column 3 - line 99, column 66): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_c, $copy_selectorName);
          };
          return $tco_result;
      };
  };
  var getValue = function (item) {
      return function (field) {
          var fvs = Data_Array.filter(function (v) {
              return v.field === field;
          })(item.fieldValues);
          var v = Data_Array.uncons(fvs);
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Maybe.Just && v.value0.tail.length === 0) {
              return new Data_Maybe.Just(v.value0.head.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Main (line 281, column 3 - line 284, column 57): " + [ v.constructor.name ]);
      };
  };
  var flatten = function (c) {
      return function (v) {
          if (v instanceof Direct) {
              return [ v.value0 ];
          };
          if (v instanceof Sequence) {
              return Data_Array.concatMap(flatten(c))(v.value0);
          };
          if (v instanceof Variable) {
              return flatten(c)(lookUpDefinition(c)(v.value0));
          };
          if (v instanceof Exclude) {
              if (v.value0 instanceof Direct) {
                  return matchQuantity(v.value0.value0.quantity)([ {
                      predicates: v.value0.value0.predicates,
                      quantity: mkNAll
                  } ])([ {
                      predicates: v.value0.value0.predicates,
                      quantity: mkNAll
                  } ])(function (q) {
                      var $71 = q <= 0;
                      if ($71) {
                          return [ {
                              predicates: v.value0.value0.predicates,
                              quantity: mkExact(q)
                          } ];
                      };
                      return [ {
                          predicates: v.value0.value0.predicates,
                          quantity: mkExact(-q | 0)
                      } ];
                  });
              };
              if (v.value0 instanceof Exclude) {
                  return flatten(c)(v.value0);
              };
              if (v.value0 instanceof Sequence) {
                  return flatten(c)(new Sequence(Data_Functor.map(Data_Functor.functorArray)(Exclude.create)(v.value0.value0)));
              };
              if (v.value0 instanceof Variable) {
                  return flatten(c)(new Exclude(lookUpDefinition(c)(v.value0.value0)));
              };
              throw new Error("Failed pattern match at Main (line 164, column 3 - line 177, column 57): " + [ v.value0.constructor.name ]);
          };
          throw new Error("Failed pattern match at Main (line 159, column 1 - line 159, column 46): " + [ c.constructor.name, v.constructor.name ]);
      };
  };
  var flattenAll = function (c) {
      return Data_Functor.map(Data_Functor.functorArray)(function (d) {
          return {
              name: d.name,
              selectors: flatten(c)(d.selector)
          };
      })(c);
  };
  var flattenedCheckedConfig = function (r) {
      var $79 = r.nameError === "";
      if ($79) {
          return {
              nameError: "",
              nameCheckedTree: flattenAll(r.nameCheckedTree)
          };
      };
      return {
          nameError: r.nameError,
          nameCheckedTree: [  ]
      };
  };
  var evalItem = function (fs) {
      return function (item) {
          return Data_Array.foldl(function (item$prime) {
              return function (f) {
                  var $80 = matchPredicates(f.predicates)(item$prime);
                  if ($80) {
                      var r = take(f.quantity)({
                          leftCount: item$prime.leftCount,
                          viewCount: item$prime.viewCount
                      });
                      return {
                          leftCount: r.leftCount,
                          viewCount: r.viewCount,
                          fieldValues: item$prime.fieldValues
                      };
                  };
                  return item$prime;
              };
          })(item)(fs);
      };
  };
  var convertToItemList = function (inputItems) {
      var v = Data_Array.uncons(inputItems);
      if (v instanceof Data_Maybe.Nothing) {
          return [  ];
      };
      if (v instanceof Data_Maybe.Just) {
          return Data_Array.cons({
              leftCount: v.value0.head.quantity,
              viewCount: 0,
              fieldValues: [ {
                  field: "name",
                  value: v.value0.head.name
              }, {
                  field: "kind",
                  value: v.value0.head.kind
              } ]
          })(convertToItemList(v.value0.tail));
      };
      throw new Error("Failed pattern match at Main (line 314, column 5 - line 321, column 33): " + [ v.constructor.name ]);
  };
  var convertFromItemList = function (items) {
      var v = Data_Array.uncons(items);
      if (v instanceof Data_Maybe.Nothing) {
          return [  ];
      };
      if (v instanceof Data_Maybe.Just) {
          var $86 = v.value0.head.viewCount <= 0;
          if ($86) {
              return convertFromItemList(v.value0.tail);
          };
          var v1 = getValue(v.value0.head)("name");
          if (v1 instanceof Data_Maybe.Nothing) {
              return convertFromItemList(v.value0.tail);
          };
          if (v1 instanceof Data_Maybe.Just) {
              var v2 = getValue(v.value0.head)("kind");
              if (v2 instanceof Data_Maybe.Nothing) {
                  return convertFromItemList(v.value0.tail);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  return Data_Array.cons({
                      name: v1.value0,
                      kind: v2.value0,
                      quantity: v.value0.head.viewCount
                  })(convertFromItemList(v.value0.tail));
              };
              throw new Error("Failed pattern match at Main (line 303, column 26 - line 308, column 56): " + [ v2.constructor.name ]);
          };
          throw new Error("Failed pattern match at Main (line 301, column 11 - line 308, column 56): " + [ v1.constructor.name ]);
      };
      throw new Error("Failed pattern match at Main (line 294, column 5 - line 308, column 56): " + [ v.constructor.name ]);
  };
  var _nameCheckSelector = function (knowns) {
      return function (v) {
          if (v instanceof Direct) {
              return [  ];
          };
          if (v instanceof Sequence) {
              return Data_Array.foldl(function (r) {
                  return function (s) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(r)(_nameCheckSelector(knowns)(s));
                  };
              })([  ])(v.value0);
          };
          if (v instanceof Exclude) {
              return _nameCheckSelector(knowns)(v.value0);
          };
          if (v instanceof Variable) {
              var v2 = Data_Array.elemIndex(Data_Eq.eqString)(v.value0)(knowns);
              if (v2 instanceof Data_Maybe.Nothing) {
                  return [ v.value0 ];
              };
              if (v2 instanceof Data_Maybe.Just) {
                  return [  ];
              };
              throw new Error("Failed pattern match at Main (line 153, column 4 - line 155, column 19): " + [ v2.constructor.name ]);
          };
          throw new Error("Failed pattern match at Main (line 146, column 1 - line 146, column 59): " + [ knowns.constructor.name, v.constructor.name ]);
      };
  };
  var _nameCheckConfig = function ($copy_names) {
      return function ($copy_c) {
          var $tco_var_names = $copy_names;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(names, c) {
              var v = Data_Array.uncons(c);
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  var chkHead = _nameCheckSelector(names)(v.value0.head.selector);
                  var $103 = Data_Array.length(chkHead) > 0;
                  if ($103) {
                      $tco_done = true;
                      return new Data_Maybe.Just({
                          at: v.value0.head.name,
                          unknownNames: chkHead
                      });
                  };
                  $tco_var_names = Data_Array.cons(v.value0.head.name)(names);
                  $copy_c = v.value0.tail;
                  return;
              };
              throw new Error("Failed pattern match at Main (line 138, column 3 - line 144, column 53): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_names, $copy_c);
          };
          return $tco_result;
      };
  };
  var nameCheckConfig = _nameCheckConfig([  ]);
  var _evaluate = function (cs) {
      return function (n) {
          return function (items) {
              var cs$prime = Data_Array.filter(function (x) {
                  return x.name === n;
              })(cs);
              var fs = (function () {
                  var v = Data_Array.head(cs$prime);
                  if (v instanceof Data_Maybe.Nothing) {
                      return [  ];
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0.selectors;
                  };
                  throw new Error("Failed pattern match at Main (line 216, column 13 - line 218, column 38): " + [ v.constructor.name ]);
              })();
              return Data_Functor.map(Data_Functor.functorArray)(evalItem(fs))(items);
          };
      };
  };
  var evaluate = function (c) {
      return function (n) {
          return function (items) {
              return _evaluate(flattenAll(c))(n)(items);
          };
      };
  };
  var evaluateCheckedConfig = function (v) {
      return function (n) {
          return function (inputItems) {
              if (v.nameError === "") {
                  var items = convertToItemList(inputItems);
                  var items$prime = _evaluate(v.nameCheckedTree)(n)(items);
                  return convertFromItemList(items$prime);
              };
              return [  ];
          };
      };
  };
  var _checkDuplicates = function ($copy_names) {
      return function ($copy_c) {
          var $tco_var_names = $copy_names;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(names, c) {
              var v = Data_Array.uncons(c);
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  var v1 = Data_Array.elemIndex(Data_Eq.eqString)(v.value0.head.name)(names);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      $tco_var_names = Data_Array.cons(v.value0.head.name)(names);
                      $copy_c = v.value0.tail;
                      return;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0.head.name);
                  };
                  throw new Error("Failed pattern match at Main (line 126, column 8 - line 128, column 35): " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Main (line 123, column 4 - line 128, column 35): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_names, $copy_c);
          };
          return $tco_result;
      };
  };
  var checkDuplicates = _checkDuplicates([  ]);
  var nameCheck = function (c) {
      var v = checkDuplicates(c);
      if (v instanceof Data_Maybe.Just) {
          return {
              nameError: "Name Error: the definition " + (v.value0 + " is already defined!"),
              nameCheckedTree: [  ]
          };
      };
      if (v instanceof Data_Maybe.Nothing) {
          var v1 = nameCheckConfig(c);
          if (v1 instanceof Data_Maybe.Nothing) {
              return {
                  nameError: "",
                  nameCheckedTree: c
              };
          };
          if (v1 instanceof Data_Maybe.Just) {
              return {
                  nameError: "Name Error at " + (v1.value0.at + (" : the names " + (Data_Show.show(Data_Show.showArray(Data_Show.showString))(v1.value0.unknownNames) + " are not defined!"))),
                  nameCheckedTree: [  ]
              };
          };
          throw new Error("Failed pattern match at Main (line 109, column 16 - line 114, column 32): " + [ v1.constructor.name ]);
      };
      throw new Error("Failed pattern match at Main (line 105, column 3 - line 114, column 32): " + [ v.constructor.name ]);
  };
  exports["mkAll"] = mkAll;
  exports["mkNAll"] = mkNAll;
  exports["mkExact"] = mkExact;
  exports["matchQuantity"] = matchQuantity;
  exports["Direct"] = Direct;
  exports["Exclude"] = Exclude;
  exports["Sequence"] = Sequence;
  exports["Variable"] = Variable;
  exports["lookUpDefinition"] = lookUpDefinition;
  exports["nameCheck"] = nameCheck;
  exports["checkDuplicates"] = checkDuplicates;
  exports["_checkDuplicates"] = _checkDuplicates;
  exports["nameCheckConfig"] = nameCheckConfig;
  exports["_nameCheckConfig"] = _nameCheckConfig;
  exports["_nameCheckSelector"] = _nameCheckSelector;
  exports["flatten"] = flatten;
  exports["flattenAll"] = flattenAll;
  exports["flattenedCheckedConfig"] = flattenedCheckedConfig;
  exports["take"] = take;
  exports["_evaluate"] = _evaluate;
  exports["evalItem"] = evalItem;
  exports["matchPredicates"] = matchPredicates;
  exports["matchPredicate"] = matchPredicate;
  exports["match"] = match;
  exports["evaluate"] = evaluate;
  exports["evaluateCheckedConfig"] = evaluateCheckedConfig;
  exports["getValue"] = getValue;
  exports["convertFromItemList"] = convertFromItemList;
  exports["convertToItemList"] = convertToItemList;
  exports["main"] = main;
})(PS);
PS["Main"].main();